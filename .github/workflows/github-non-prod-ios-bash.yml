name: iOS Not-Prod Github & Bash

on:
  push: # TODO: Remove this type after testing
    branches-ignore:
      - 'release/'
      - 'hotifix/'
  # Run on every pull request (except for release/* and hotfix/* branches)
  pull_request:
    branches-ignore:
      - 'release/'
      - 'hotifix/'
  # Manually trigger the workflow (https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow#running-a-workflow)
  workflow_dispatch:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # Cancel previous runs of this workflow

jobs:
  build-ios:
    name: iOS Build (ad-hoc)
    runs-on: macos-12
    env:
      NO_FLIPPER: 1 # speed up build (see: docs/speedingup.md)
      IPA_OUTPUT_PATH: ${{ github.workspace }}/my_app.ipa
    steps:
      - uses: actions/checkout@v3

      - name: Yarn cache
        uses: actions/cache@v3
        id: node_cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarnV1-${{ hashFiles('./yarn.lock') }}

      - name: Install node_modules
        run: yarn install --frozen-lockfile
        if: steps.node_cache.outputs.cache-hit != 'true'

      - name: Access Pods from cache if available
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-pods-

      - name: Install Pods
        working-directory: ios
        run: pod install

      - name: Build ipa ad-hoc
        run: ./scripts/make-ios-adhoc-build.sh
        env:
          IOS_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_ADHOC_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_ADHOC_PROVISIONING_PROFILE_BASE64 }}
          IOS_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          EXPORT_METHOD: ad-hoc
          IPA_OUTPUT_PATH: ${{ env.IPA_OUTPUT_PATH }}

      # (optional) Use GitHub Actions artifacts to store the ipa
      - name: Store artifacts on GitHub
        uses: actions/upload-artifact@v3
        with:
          path: ${{ steps.nitro.outputs.nitro-app-path }}

      # (optional) Upload the apk to Firebase App Distribution
      - name: Distribute apk to Firebase App Distribution
        run: |
          source ./scripts/env.sh
          APP_ID=$FIREBASE_PROD_IOS_APP_ID ./scripts/distribute-to-firebase.sh
        env:
          # required
          APK_OR_IPA_PATH: ${{ env.IPA_OUTPUT_PATH }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          # optional
          RELEASE_NOTES: Made by - ${{ github.actor }} - ${{ github.event.head_commit.message }}
